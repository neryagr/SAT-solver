import networkx as nx
from collections import Counter
from SAT_parser import tseitin_and_variable_map as ts
from timeit import default_timer as timer

# למחוק משתנה שמופיע פעמיים בפסוקית
# אם מופיע משתנה ושלילתו למחוק את כל הפסוקית
def preprocessing(cnf):
    new_cnf = []
    for p in cnf:
        new_p = []
        for l in p:
            if -l in new_p:
                new_p = []
                break
            if l not in new_p:
                new_p.append(l)
        if not new_p == []:
            new_cnf.append(new_p)
    return new_cnf


# return True iff the clause is already satisfied in g
def _done(p, g):
    for lit in p:
        if lit in g:
            return True
    return False


# עובר על הפסוקיות וההשמות, אם יש פסוקית שכל ההשמות שלה הושמו חוץ ממשתנה אחד, מציב בו את הערך הדרוש
# אם זה גורם שפסוקית תהיה רק F אז צרך להחזיר רשימה של השמות שבסופה יש 0
#בונה את הגרף של CDCL עם תויות כמו שמסומן במצגת
def bcp(cnf, G, level, allpNotSat):
    while True:
        isNotChange = True
        for p in allpNotSat:  # עובר על כל פסוקית
            b = True #בודק האם בפסוקית יש שתי ליטרלים שאין בהם הצבה ואם כן אז יוצא מהפסוקית
            rem = 0#זוכר מי הליטרל היחיד בפסוקית שמצאנו
            if _done(cnf[p], G):
                continue
            for l in cnf[p]:  # עובר על כל ליטרל בפסוקית
                if -l not in G:
                    rem = l
                    b = not b
                    if b:
                        break
            if not rem:
                G.add_node(0, l=level)# מויסף את הקודקוד קונפליקט לגרף שלנו עם תוית של הרמה
                for l in cnf[p]:
                    G.add_edge(-l, 0 ,c=p)#מוסיף את  הצלעות מהקודקודים שמהם למדנו את הקונפליקט עם
                    # תוית מאיזה פסוקית למדנו
                return G, True
            if not b:
                isNotChange = False
                G.add_node(rem, l=level)
                templ = cnf[p].copy()
                templ.remove(rem)
                for l in templ:
                    G.add_edge(-l, rem, c=p)
        if isNotChange:
            break
    return G, False


# הדוגמא של המורה ממצגת 3
def bcpCheck():
    G = nx.DiGraph()
    G.add_node(1, l=1)
    G.add_node(2, l=2)
    G.add_node(3, l=3)
    G.add_node(4, l=4)
    isConflict = False
    cnf = [[-1, -4, 5], [-4, 6], [-5, -6, 7], [-7, 8], [-2, -7, 9], [-8, -9], [-8, 9], [-2, -7]]
    allpNotSat = []
    (_, allpNotSat) = allSat(cnf, G)
    (G, isConflict) = bcp(cnf, G, 4, allpNotSat)
    return G, isConflict


# מחפשת את הנקודה הייחודית ומחזירה אותה
def Uip(G, curChoise):
    paths = nx.all_simple_paths(G, curChoise, 0)
    paths = list(paths)
    UIPs = paths[0].copy()
    for node in paths[0]:
        for p in paths:
            if node not in p:
                UIPs.remove(node)
                break
    return UIPs[-2]


def UIPCheck():
    G = nx.DiGraph()
    isConflict = False
    (G, isConflict) = bcpCheck()
    return Uip(G, 4)


# מקבל את הגרף ואת הUIP ולומד את הפסוק סתירה החדש ומחזיר אותן, בנוסף אומר לי לאן לחזור אחורה
def Resolution(cnf, G, Uip):
    conflict_node = 0
    # initiate conflict clause
    conflict_clause = cnf[G.edges[list(G.predecessors(conflict_node))[0], conflict_node]['c']].copy()
    done = False
    if -Uip in conflict_clause:
        done = True
        for l in conflict_clause:
            if l != -Uip:
                if G.nodes[-l]['l'] >= G.nodes[Uip]['l']:
                    done = False
                    break

    while not done:
        # find last assigned literal
        last_assigned = Uip
        for l in conflict_clause:
            if l != -Uip:
                if G.nodes[-l]['l'] >= G.nodes[last_assigned]['l']:
                    last_assigned = -l

        # choose clause to resolve with
        resolution_clause = cnf[G.edges[list(G.predecessors(last_assigned))[0],
                                        last_assigned]['c']].copy()

        # resolve clauses
        conflict_clause.remove(-last_assigned)
        resolution_clause.remove(last_assigned)
        conflict_clause = list(set(conflict_clause) | set(resolution_clause))

        # check if done, i.e. has -uip and no others from this level
        if -Uip in conflict_clause:
            done = True
            for l in conflict_clause:
                if l != -Uip:
                    if G.nodes[-l]['l'] >= G.nodes[Uip]['l']:
                        done = False
                        break

    # find what level to backjump to - second highest level in clause
    jump_to = 0
    for l in conflict_clause:
        if jump_to < G.nodes[-l]['l'] < G.nodes[Uip]['l']:
            jump_to = G.nodes[-l]['l']

    return conflict_clause, jump_to


def DLIS(cnf, allpNotSat,G):
    unsatCnfp = []#the flat list of all varibels that are in unsat cluases
    for i in allpNotSat:
        for p in cnf[i]:
            if p not in G and -p not in G:
                unsatCnfp.append(p)
    cnts = Counter(unsatCnfp)
    maximum_cnt = max(cnts.values())
    for value, cnt in cnts.items():
        if cnt == maximum_cnt:
            return value


#returns true if all sat, and if not returns also the numbers of unsat cluases
def allSat(cnf, G):
    trueNodes = G.nodes()
    isAllSat = True
    pSat = False
    allpNotSat = list(range(0, len(cnf)))
    i = 0
    for p in cnf:
        for l in p:
            if l in trueNodes:
                pSat = True
                allpNotSat.remove(i)
                break
        if not pSat:
            isAllSat = False
        pSat = False
        i += 1
    return isAllSat, allpNotSat


# זה הפונקציה הכבדה, בונה את הגרף ומתחילה להריץ את כל האלגוריתם
# צריך להוסיף לה את היוריסטיקות לפי מה היא בוחרת
def Cdcl(cnf):
    G = nx.DiGraph()
    isConflict = False
    curChoice = [1]
    level = 0
    (G, isConflict) = bcp(cnf, G, level, list(range(0, len(cnf))))

    while True:
        if isConflict:
            if level == 0:
                return [], "UNSAT"
            uip = Uip(G, curChoice[level])
            (conflictClause, level) = Resolution(cnf, G, uip)
            nodes = list((n for n in G.nodes if G.nodes[n]['l'] > level))
            G.remove_nodes_from(nodes)
            cnf.append(conflictClause)
            (isAllSat, allpNotSat) = allSat(cnf, G)
            (G, isConflict) = bcp(cnf, G, level, allpNotSat)
        else:
            (isAllSat, allpNotSat) = allSat(cnf,G)
            if isAllSat:
                return G.nodes, "SAT"
            level += 1
            if len(curChoice) <= level:
                curChoice.append(DLIS(cnf, allpNotSat,G))
            else:
                curChoice[level] = DLIS(cnf,allpNotSat,G)
            G.add_node(curChoice[level], l=level)
            t = []
            for i in allpNotSat:
                if curChoice[level] in cnf[i]:
                    t.append(i)
            allpNotSat = list(set(allpNotSat) - set(t))
            if allpNotSat == []:
                return G.nodes, "SAT"
            (G, isConflict) = bcp(cnf, G, level,allpNotSat)


def example():
    # עובד על הדוגמא הענקית הזאת שהיא הגרף מתרגיל 1 (2א)
    cnf=[[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27],[28,29,30],[31,32,33],[34,35,36],[-1,-2],[-1,-3],[-2,-1],[-2,-3],[-3,-1],[-3,-2],[-4,-5],[-4,-6],[-5,-4],[-5,-6],[-6,-4],[-6,-5],[-7,-8],[-7,-9],[-8,-7],[-8,-9],[-9,-7],[-9,-8],[-10,-11],[-10,-12],[-11,-10],[-11,-12],[-12,-10],[-12,-11],[-13,-14],[-13,-15],[-14,-13],[-14,-15],[-15,-13],[-15,-14],[-16,-17],[-16,-18],[-17,-16],[-17,-18],[-18,-16],[-18,-17],[-19,-20],[-19,-21],[-20,-19],[-20,-21],[-21,-19],[-21,-20],[-22,-23],[-22,-24],[-23,-22],[-23,-24],[-24,-22],[-24,-23],[-25,-26],[-25,-27],[-26,-25],[-26,-27],[-27,-25],[-27,-26],[-28,-29],[-28,-30],[-29,-28],[-29,-30],[-30,-28],[-30,-29],[-31,-32],[-31,-33],[-32,-31],[-32,-33],[-33,-31],[-33,-32],[-34,-35],[-34,-36],[-35,-34],[-35,-36],[-36,-34],[-36,-35],[-1,-4],[-2,-5],[-3,-6],[-1,-7],[-2,-8],[-3,-9],[-1,-10],[-2,-11],[-3,-12],[-1,-25],[-2,-26],[-3,-27],[-1,-34],[-2,-35],[-3,-36],[-4,-7],[-5,-8],[-6,-9],[-4,-10],[-5,-11],[-6,-12],[-4,-13],[-5,-14],[-6,-15],[-4,-16],[-5,-17],[-6,-18],[-7,-16],[-8,-17],[-9,-18],[-7,-28],[-8,-29],[-9,-30],[-7,-34],[-8,-35],[-9,-36],[-10,-13],[-11,-14],[-12,-15],[-10,-19],[-11,-20],[-12,-21],[-10,-25],[-11,-26],[-12,-27],[-13,-19],[-14,-20],[-15,-21],[-13,-22],[-14,-23],[-15,-24],[-13,-16],[-14,-17],[-15,-18],[-16,-22],[-17,-23],[-18,-24],[-16,-28],[-17,-29],[-18,-30],[-19,-28],[-20,-29],[-21,-30],[-19,-22],[-20,-23],[-21,-24],[-19,-25],[-20,-26],[-21,-27],[-22,-31],[-23,-32],[-24,-33],[-22,-28],[-23,-29],[-24,-30],[-25,-31],[-26,-32],[-27,-33],[-25,-34],[-26,-35],[-27,-36],[-31,-34],[-32,-35],[-33,-36]]
    print(Cdcl(cnf))
    # עובד על הדוגמא הזאת שאלה 4 מתרגיל 1
    cnf = [[5,-1,3], [-1,-5], [-3,-4], [1,4], [1,-4], [-1,5]]
    print(Cdcl(cnf))
    # תרגיל 1 (2ב)
    cnf = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20],[21,22,23,24],[25,26,27,28],[29,30,31,32],[33,34,35,36],[37,38,39,40],[41,42,43,44],[45,46,47,48],[-1,-2],[-1,-3],[-1,-4],[-2,-1],[-2,-3],[-2,-4],[-3,-1],[-3,-2],[-3,-4],[-4,-1],[-4,-2],[-4,-3],[-5,-6],[-5,-7],[-5,-8],[-6,-5],[-6,-7],[-6,-8],[-7,-5],[-7,-6],[-7,-8],[-8,-5],[-8,-6],[-8,-7],[-9,-10],[-9,-11],[-9,-12],[-10,-9],[-10,-11],[-10,-12],[-11,-9],[-11,-10],[-11,-12],[-12,-9],[-12,-10],[-12,-11],[-13,-14],[-13,-15],[-13,-16],[-14,-13],[-14,-15],[-14,-16],[-15,-13],[-15,-14],[-15,-16],[-16,-13],[-16,-14],[-16,-15],[-17,-18],[-17,-19],[-17,-20],[-18,-17],[-18,-19],[-18,-20],[-19,-17],[-19,-18],[-19,-20],[-20,-17],[-20,-18],[-20,-19],[-21,-22],[-21,-23],[-21,-24],[-22,-21],[-22,-23],[-22,-24],[-23,-21],[-23,-22],[-23,-24],[-24,-21],[-24,-22],[-24,-23],[-25,-26],[-25,-27],[-25,-28],[-26,-25],[-26,-27],[-26,-28],[-27,-25],[-27,-26],[-27,-28],[-28,-25],[-28,-26],[-28,-27],[-29,-30],[-29,-31],[-29,-32],[-30,-29],[-30,-31],[-30,-32],[-31,-29],[-31,-30],[-31,-32],[-32,-29],[-32,-30],[-32,-31],[-33,-34],[-33,-35],[-33,-36],[-34,-33],[-34,-35],[-34,-36],[-35,-33],[-35,-34],[-35,-36],[-36,-33],[-36,-34],[-36,-35],[-37,-38],[-37,-39],[-37,-40],[-38,-37],[-38,-39],[-38,-40],[-39,-37],[-39,-38],[-39,-40],[-40,-37],[-40,-38],[-40,-39],[-41,-42],[-41,-43],[-41,-44],[-42,-41],[-42,-43],[-42,-44],[-43,-41],[-43,-42],[-43,-44],[-44,-41],[-44,-42],[-44,-43],[-45,-46],[-45,-47],[-45,-48],[-46,-45],[-46,-47],[-46,-48],[-47,-45],[-47,-46],[-47,-48],[-48,-45],[-48,-46],[-48,-47],[-1,-5],[-2,-6],[-3,-7],[-4,-8],[-1,-9],[-2,-10],[-3,-11],[-4,-12],[-1,-13],[-2,-14],[-3,-15],[-4,-16],[-1,-33],[-2,-34],[-3,-35],[-4,-36],[-1,-45],[-2,-46],[-3,-47],[-4,-48],[-5,-9],[-6,-10],[-7,-11],[-8,-12],[-5,-13],[-6,-14],[-7,-15],[-8,-16],[-5,-17],[-6,-18],[-7,-19],[-8,-20],[-5,-21],[-6,-22],[-7,-23],[-8,-24],[-9,-21],[-10,-22],[-11,-23],[-12,-24],[-9,-37],[-10,-38],[-11,-39],[-12,-40],[-9,-45],[-10,-46],[-11,-47],[-12,-48],[-13,-17],[-14,-18],[-15,-19],[-16,-20],[-13,-25],[-14,-26],[-15,-27],[-16,-28],[-13,-33],[-14,-34],[-15,-35],[-16,-36],[-17,-25],[-18,-26],[-19,-27],[-20,-28],[-17,-29],[-18,-30],[-19,-31],[-20,-32],[-17,-21],[-18,-22],[-19,-23],[-20,-24],[-21,-29],[-22,-30],[-23,-31],[-24,-32],[-21,-37],[-22,-38],[-23,-39],[-24,-40],[-25,-37],[-26,-38],[-27,-39],[-28,-40],[-25,-29],[-26,-30],[-27,-31],[-28,-32],[-25,-33],[-26,-34],[-27,-35],[-28,-36],[-29,-41],[-30,-42],[-31,-43],[-32,-44],[-29,-37],[-30,-38],[-31,-39],[-32,-40],[-33,-41],[-34,-42],[-35,-43],[-36,-44],[-33,-45],[-34,-46],[-35,-47],[-36,-48],[-41,-45],[-42,-46],[-43,-47],[-44,-48]]
    print(Cdcl(cnf))
    cnf = [[48, -54, -82], [-4, -12, -63], [-46, -56, -81], [5, 62, 66], [1, 44, 97], [-16, -58, 74], [-21, 40, 88],
           [67, 79, 93], [3, -96, 100], [-13, -86, 97], [77, -96, -100], [-38, -47, -85], [20, 37, 94], [-38, -42, -92],
           [11, -15, 100], [-25, -40, 47], [48, 54, 98], [6, 75, -79], [-26, 40, 46], [15, 78, 80], [33, 69, 79],
           [14, -52, 79], [13, 24, 39], [41, 70, 93], [1, -79, 93], [53, 70, -89], [7, -38, 55], [-7, -34, -71],
           [68, -74, 82], [-14, 18, 76], [-43, -46, -60], [48, 93, -99], [-48, 52, 56], [63, 64, 70], [-17, -22, -35],
           [-2, 7, 9], [-4, 9, 18], [12, -49, 99], [-2, -49, -94], [3, -43, 92], [10, -23, -71], [-24, -28, 32],
           [14, 45, -79], [-36, 41, -63], [20, 74, 86], [-11, -34, -45], [-1, -48, -52], [-10, -46, -49], [36, -38, 66],
           [27, 41, 85], [-38, -43, -59], [5, -36, -41], [-5, -21, -92], [-14, -29, 74], [-37, 75, 89], [24, -26, -48],
           [-10, 30, 72], [23, -42, 80], [-46, 75, -97], [23, -28, -46], [8, -35, -61], [-50, 57, 71], [10, 33, 67],
           [33, 55, -91], [-2, -52, 64], [17, -46, 76], [17, -33, -42], [13, -38, -72], [4, 27, -65], [-9, 42, 61],
           [14, -57, -58], [-10, 84, -94], [-18, 20, -30], [15, 31, -91], [-7, 56, 89], [30, 56, 83], [4, 10, -95],
           [39, 46, -58], [-28, -73, 84], [-7, -14, -94], [6, -22, -54], [-24, 63, -77], [-24, 39, 85], [54, -67, 96],
           [-31, -55, -93], [-31, 73, -90], [24, 41, -85], [27, 30, -34], [-16, -34, 79], [2, 3, -23], [-13, 19, -68],
           [10, 12, 15], [5, -22, 48], [-40, -42, 94], [64, 68, 100], [-31, -63, -86], [7, 10, 52], [-22, 53, 77],
           [56, 59, 85], [-19, -23, -77], [20, 23, -54], [45, 64, -77], [-30, -36, 56], [-5, 19, -44], [-8, 12, -73],
           [-36, -56, 65], [-12, -59, 85], [-48, -58, 100], [-16, -52, 61], [56, -58, -97], [9, -26, -98], [8, 26, 30],
           [27, -55, -100], [40, -43, 51], [-53, -56, 58], [40, 46, -89], [2, -10, -71], [24, 49, -82], [-20, -46, -48],
           [-35, -49, 79], [1, -5, 41], [-25, -48, -75], [-50, 61, -96], [-56, 57, -71], [48, -51, 84], [45, -75, 94],
           [19, 90, 98], [21, -36, -63], [-32, -57, 58], [14, -58, 96], [38, -63, -65], [57, -59, 72], [-20, 24, 83],
           [-23, -30, 75], [-9, 10, -57], [30, 90, 99], [-2, -35, 94], [-74, -91, 96], [-50, -84, 92], [-16, -26, 89],
           [28, 42, -87], [-11, -26, -30], [57, 70, 72], [-8, 40, -74], [-13, -21, -68], [50, 95, 96], [-3, -15, -69],
           [-16, -26, -67], [-66, -80, 89], [25, 44, -54], [-39, -55, -68], [25, -72, 83], [-9, -41, 92], [35, 65, -69],
           [-26, -58, -88], [32, -66, 84], [-12, 14, 84], [-15, -31, -65], [52, 58, -98], [53, -78, 88], [36, 49, 64],
           [63, 74, -77], [16, 56, 93], [-3, -20, -31], [14, -54, -60], [42, -55, 71], [3, -5, 66], [-3, 13, -23],
           [63, 64, 65], [1, -28, 36], [-8, -36, 76], [4, -18, 37], [-34, -43, -63], [-23, -51, 75], [-26, -39, -86],
           [36, 38, -65], [-80, 86, 87], [-11, -29, -54], [-25, -41, 70], [-47, 66, -96], [-53, -89, -100],
           [-48, -60, -67], [-22, -26, -60], [-16, 63, -78], [28, 48, -70], [-52, -53, 97], [13, 18, -64],
           [33, -37, -79], [-11, 56, -60], [46, -55, -61], [-10, -34, -65], [-11, 16, 62], [43, -54, -57],
           [-13, -18, -79], [-36, -50, 51], [10, 24, -86], [5, 41, -86], [28, -74, -96], [7, -83, -97], [-15, 86, -92],
           [-28, -48, 57], [2, -38, -63], [-7, 36, -45], [15, -60, 63], [-4, -81, 89], [-10, -16, 46], [-26, -58, -85],
           [2, 38, -66], [25, 26, 48], [-21, -40, -73], [-37, 47, 76], [15, -22, 97], [1, -15, -82], [-10, -66, -72],
           [28, 41, -80], [12, -26, 62], [-8, 42, -96], [22, -53, 98], [12, 20, 78], [-48, -81, -84], [29, -55, -94],
           [3, 31, 95], [-3, -89, -96], [3, -12, -51], [11, -17, -20], [38, -39, -65], [19, 31, 74], [-12, 61, -94],
           [77, -88, 95], [13, -39, 87], [1, -36, -68], [1, 81, 88], [8, 14, 69], [8, 67, 81], [41, 44, -65],
           [-18, 52, -80], [27, -37, 93], [7, 40, 86], [1, -63, 100], [-22, 69, 99], [19, -57, 92], [-8, 38, -66],
           [11, -17, -26], [29, -47, 69], [5, -10, -52], [-24, 58, 79], [6, 56, -91], [33, -76, 83], [40, 44, -66],
           [-1, 50, -70], [-9, 18, -19], [-9, 36, 93], [10, 58, 70], [-2, -17, -86], [1, 31, -58], [-46, 58, -76],
           [-39, -44, -77], [18, 42, -62], [-37, -54, 100], [54, -56, 80], [5, -53, -88], [4, -29, 77], [41, 79, 81],
           [70, -74, -85], [-24, 39, -96], [21, 36, 91], [-40, 43, -51], [58, 82, -100], [-10, -77, 88], [1, -15, -94],
           [2, 55, 98], [-12, 75, 99], [14, -21, 54], [44, 49, -79], [-21, -77, -94], [-7, -11, 100], [22, -73, -98],
           [-82, 88, 95], [9, 72, -86], [24, 41, 77], [32, 41, 71], [-17, -63, 86], [-30, 48, 61], [-34, 50, -58],
           [-15, 16, -90], [-40, -77, -81], [19, -62, -75], [19, -29, 87], [-12, 28, 59], [-12, 54, 81], [15, -30, 71],
           [29, -64, -85], [-53, -55, -86], [-26, -28, 60], [-31, 50, -68], [22, 58, -81], [-10, 34, -79],
           [51, 88, -93], [-50, 69, -99], [52, -53, 64], [20, -34, 53], [3, -39, -60], [-7, 26, 27], [-11, 16, -90],
           [-24, -72, -88], [-33, -45, 58], [-36, 42, -66], [5, 44, -94], [-35, 51, 69], [-18, 19, -38], [17, 68, 70],
           [25, -39, 52], [1, -19, 26], [-18, -31, 45], [24, 75, 76], [-35, -88, 98], [-19, -52, 57], [11, -16, 21],
           [24, -70, 75], [-60, 78, 97], [58, 79, 100], [-35, -70, -92], [15, 28, 59], [-24, -62, -99], [4, -33, -51],
           [74, -81, 93], [39, 56, -68], [-48, 56, 66], [-18, -32, 98], [-49, 62, 78], [-55, -65, -69], [5, -36, -96],
           [-16, 39, -82], [-17, 54, 67], [33, 46, -65], [16, -79, 93], [7, -11, 33], [16, -52, -78], [-15, -28, -61],
           [18, 77, 94], [-2, -3, -28], [-9, -77, 90], [-16, -22, -62], [31, -41, 50], [23, 64, 93], [-57, -76, 78],
           [-1, -40, -70], [-48, -72, -86], [31, 59, -61], [-15, 58, -62], [23, -44, 74], [-15, 32, 59], [24, -36, -68],
           [73, 98, 100], [-5, 12, 90], [16, 21, 49], [57, 77, 81], [-17, 27, 42], [-63, -89, 91], [-49, 50, 94],
           [5, 54, 79], [32, -35, -89], [-39, -40, -98], [-1, -54, -92], [24, 74, -75], [20, 27, 98], [-63, -73, -81],
           [-5, 80, 92], [-6, -31, 77], [-37, 44, -48], [16, -68, -82], [71, 88, 93], [-49, 59, 100], [46, 67, 76],
           [5, -26, -90], [-68, 95, -96], [-62, 77, -96], [-4, 25, -32], [5, 27, 92], [-1, 8, -90], [-65, 90, 99],
           [38, -70, -80], [-8, -16, 73], [39, 49, 98], [50, -57, -97], [-7, 59, -90], [12, 68, 84], [15, 16, 88],
           [4, 11, 43], [36, -42, 54], [50, -59, -75], [12, 51, -65], [46, 64, -72], [-18, -39, 62], [11, -21, -62],
           [11, -24, -94], [-29, -35, 89], [7, -47, -59], [8, -11, -91], [21, 81, -84], [-12, 29, -43], [30, -43, 75],
           [16, -71, -83], [-21, 55, 69], [-65, 70, -86], [-39, -42, -66], [-53, -84, 92], [-30, -57, 98],
           [-30, 55, -66], [4, 54, -75], [-15, -39, -57], [-4, -66, 73], [14, -17, -34], [43, 53, 72], [-66, -71, 99],
           [-3, 12, 53], [38, 54, 84], [54, -80, -94], [38, 97, -99], [-23, 55, -58], [7, -8, 16], [8, 33, 67],
           [17, -25, 73], [31, -45, -57], [10, 45, -64], [-57, -70, 73], [-8, 28, -79], [-7, -26, -31], [32, -43, -98]]
    start = timer()
    print(Cdcl(cnf))
    end = timer()
    print(end - start)


def main(f_as_str):
    # verify? no p, numbers only after letter, no two letters, only and, or etch., open and close.
    # transform to cnf:
    tst_as_int_list, var_map = ts(f_as_str)
    tst_as_int_list = preprocessing(tst_as_int_list)
    nodes, is_sat = Cdcl(tst_as_int_list)
    # return sat / unsat, if sat print an example:
    print(is_sat)
    if is_sat == "SAT":
        for x in var_map:
            if var_map[x] in nodes:
                print(x, "is True")
            else:
                print(x, "is False")


main("((~x->~x2)&(~y|x2|~x))")
example()